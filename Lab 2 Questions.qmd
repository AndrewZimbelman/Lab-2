---
title: "Lab 2"
format: html
editor: visual
---

\`\`\`\
Question 2: How many records have been made in Stand 1? tree_dat %\>% 
filter (standID == 1) %>% 
tally () 
Answer: 979 
Question 3: How many records of the Abies balsamea and Pinus strobus species have been made? 
tree_dat%>% 
filter (species == "ABBA")|> 
tally() 13033 tree_dat %>% 
filter(species == "PIST")%>% 
tally() 4188 

total = 13033 + 4188 print (total) Answer: there are a combined 17221 records of the two species collected

Question 4: How many trees are older then 200 years old in the last year of the dataset?
year_last \<- tree_dat |> 
filter(year == max(year)) 
print(year_last)

year_last|> filter(age > 200)|> 
tally() 
Answer: there are 7 trees older then 200 years old recorded in the last year

Question 5: What is the oldest tree in the dataset found using slice_max? 
tree_dat|> 
arrange(age)|> 
slice_max(age)

Answer: the oldest tree is 269 years old

Question 6: Find the oldest 5 trees recorded in 2001. Use the help docs to understand optional parameters

tree_dat |> 
filter(year == 2001)|> 
slice_max(age, n=5) 
Answer: 206, 206, 212, 259, 263

Question 7: Question 7: Using slice_sample, how many trees are in a 30% sample of those recorded in 2002? 
tree_dat |>
filter(year == 2002) |> 
slice_sample(prop = 0.3)|> 
tally() 
Answer: there are 687 trees in 30% of the recorded trees in 2007

Question 8:Filter all trees in stand 5 in 2007. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees. Report the tree IDs 
tree_dat|> 
filter(year == 2007, standID == 5)|> 
arrange(desc(rad_ib))|> 
slice_head(n = 3)

Answer: the top 3 tree ID's of the top 3 trees radius at breast height are 128, 135, 157 respectively

Question 9: Reduce your full data.frame to [treeID, stand, year, and radius at breast height]. Filter to only those in stand 3 with records from 2007, and use slice_min to pull the smallest three trees meaured that year. 
tree_dat|> 
select(treeID,standID,year,rad_ib)|> 
filter(year == 2007, standID == 3)|> 
slice_min(rad_ib, n =3 )

Answer: the three smallest trees measured in 2007 had a radius of breast of 47.4, 48.4, 54.9 respectively

Question 10: Use select to remove the stand column. Use glimspe to show the dataset. 
info = tree_dat %>% 
select(!stand) |>
glimpse(info)

Answer: This graph shows every column except for stand treeID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … \$ standID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … \$ year <dbl> 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, … \$ species <chr> "ABBA", "ABBA", "ABBA", "ABBA", "ABBA", "ABBA", "ABBA", "ABB… \$ age <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1… \$ inc <dbl> 0.930, 0.950, 0.985, 0.985, 0.715, 0.840, 0.685, 0.940, 1.16… \$ rad_ib <dbl> 10.78145, 11.73145, 12.71645, 13.70145, 14.41645, 15.25645,

Question 11: Look at the help document for dplyr::select and examine the “Overview of selection features”. Identify an option (there are multiple) that would help select all columns with the string “ID” in the name. Using glimpse to view the remaining dataset

inclusion = tree_dat |> 
select(contains("ID")) |>
glimpse(inclusion)

Answer:The answer below shows all colums containing ID \$ treeID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  standID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...

Question 12: Find a selection pattern that captures all columns with either ‘ID’ or ‘stand’ in the name. Use glimpse to verify the selection.

inclusion = tree_dat |> select(contains("ID") | ('stand')) glimpse(inclusion)

Answer: The graph below shows the 3 desired columns and nothing else \$ treeID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … \$ standID <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … \$ stand <chr> "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1", "A1"

Question 13: Looking back at the data dictionary, rename rad_inc and inc to include [unit in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame (e.g. \<-). Use glimpse to view your new data.frame.

tree_dat = tree_dat |>
rename(rad_ib_unit = rad_ib)|> 
rename(inc_unit = inc)

Question 14: A key measurement in forestry in “basal area column”. The metric is computed with the formula: BA(m2) = 0.00007854⋅DBH\^2 Where DBH is the diameter at breast height (cm). Use mutate to compute DBH in centimeters, and BA in m2 (HINT: Make sure rad_ib is in cm prior to computing the diameter!). What is the mean BA_m2 of the the species POTR in 2007

tree_dat|>
mutate(rad_ib_unit = rad_ib_unit * 10)
mutate tf <- tree_dat|>
mutate(BA_M2 = 0.00007854*((rad_ib_unit^2)) |>
filter(species == 'POTR',year == (2007)) mean(tf\$BA_M2)

Answer: The mean BA_m2 of the species: 0.9241546

Question 15: Lets say for the sake of our study, trees are not established until they are 5 years of age. Use if_else to add a boolean column to our dataset called established that is TRUE if the age is greater then 5 and FALSE if less then or equal to five. Once added, use count (see ?count) to determine how many records are from estabilshed trees?

tree_dat_age = tree_dat|>
mutate(established = ifelse(age > 5,"TRUE","FALSE")) tree_dat_age |>
count(established == "TRUE") 
Answer:122503 trees are older then 5 years old (established)

Question 16: Use mutate and case_when to add a new column to you data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with count.

tree_dat <- tree_dat|>
mutate(DBH = rad_ib_unit * 2) 
tree_dat <- tree_dat|>
mutate(DBH_class = 
      case_when( DBH < 2.5 ~ "seedling", 
      DBH < 10 ~ "sapling", 
      DBH < 30~ "pole", 
      DBH >= 30 ~ "sawlog", TRUE ~ "default_result")) tree_dat_2007 = tree_dat|>
       filter(year == 2007) tree_dat_2007 |> 
       count(DBH_class == "sapling") 
       tree_dat_2007 |> count(DBH_class == "seedling") 
       tree_dat_2007 |> count(DBH_class == "pole") `               tree_dat_2007 |> count(DBH_class == "sawlog")               tree_dat|> 
       filter(year == 2007) |>
       count(DBH_class == "sapling")

Answer: there were 0 trees in any of the classifications except for sawlog which had all 2291 trees in it.

Question 17: Compute the mean DBH (in cm) and standard deviation of DBH (in cm) for all trees in 2007. Explain the values you found and their statistical meaning.

tree_dat|>
filter(year == 2007)|>
mean(tree_dat$DBH)
  sd(tree_dat$DBH)

answer: the mean tree diamter at breast height is around 115 centimeters which means that on average, trees from the data set that were recorded in 2007 have an average diameter of 115 centimeters. However, the data is relatively varied because the trees average diameter varies from around 64 cm less then and more then the mean diameter

Question 18: Compute the per species mean tree age using only those ages recorded in 2003. Identify the three species with the oldest mean age.

tree_dat_2003 = tree_dat |>
filter(year == 2003)|>
group_by(species)|>
summarize(mean_age = mean(age))|>
slice_max(mean_age, n = 3 ) 
Answer: The 3 largest mean's for age in tree species: THOC, FRNI , PIST

Question 19: In a single summarize call, find the number of unique years with records in the data set along with the first and last year recorded?

tree_dat_unique = tree_dat |> 
summarize(unique_years = n_distinct(year)) 
Answer: there are 111 unique years

Question 20: Determine the stands with the largest number of unique years recorded. Report all stands with largest (or tied with the largest) temporal record. 
tree_stand_unique = tree_dat |> 
group_by(stand)|> 
summarize(unique_year = n_distinct(year)) a

Answer: the stand with the largest number of unique years was A1 whcih was equal to the amoutn of unique years.

Final Question: We are interested in the annual DBH growth rate of each species through time, but we only want to include trees with at least a 10 year growth record. To identify this, we need to idnetify the per year growth made by each tree, there total growth record, and then average that, and compute the standard deviation, across the species.

```         
Use a combination of dplyr verbs to compute these values and report the 3 species with the fastest growth, and the 3 species with the slowest growth. (** You will need to use either lag() or diff() in your compuation. You can learn more about each in the Help pages)

tree_dat |>
  group_by(species)|>
  mutate(growth_rate = inc_unit - lag(inc_unit))

species_growth = tree_dat |>
  group_by(species)|>
  summarise(average_growth = mean(inc_unit, na.rm = TRUE))|>
  arrange(desc(average_growth))
  
slice_max(species_growth, average_growth, n = 3)
slice_min(species_growth, average_growth, n = 3)
Answer: The 3 tree species with the highest average growth are PIRE, PIBA AND POTR, the tree species with the lowest average growth are LALA, THOC, QURU 
Done :) 
```
